// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int      @id @default(autoincrement()) @map("id")
  username      String   @unique
  password      String
  createdAt     DateTime @default(now())
  // Relaciones
  sentChats     Chat[]   @relation("SentChats")
  receivedChats Chat[]   @relation("ReceivedChats")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  edited     Boolean  @default(false)
  editedAt   DateTime @updatedAt
  deletedFor Int? // ID del usuario para quien est√° eliminado el mensaje
  sentBy     Int
  // Relaciones
  chatId     Int
  chat       Chat     @relation(fields: [chatId], references: [id])
}

model Chat {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  senderId   Int
  sender     User      @relation("SentChats", fields: [senderId], references: [userId])
  receiverId Int
  receiver   User      @relation("ReceivedChats", fields: [receiverId], references: [userId])
  deleted    Trash[]
  messages   Message[]

  @@unique([senderId, receiverId])
}

model Trash {
  id        Int      @id @default(autoincrement())
  userId    Int
  deletedAt DateTime @default(now())
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@unique([id, userId, chatId])
}
